from areion import (
    AreionServerBuilder,
    DefaultRouter,
    HttpRequest,
    HttpResponse,
    create_redirect_response,
    create_text_response,
    create_json_response,
)

router = DefaultRouter()


@router.route("/json", methods=["GET"])
async def json_response(request: HttpRequest) -> HttpResponse:
    return HttpResponse(
        status_code=200,
        body={"message": "Hello, World!"},
        content_type="application/json",
    )


@router.route("/plaintext", methods=["GET", "POST"])
async def text_response(request: HttpRequest) -> HttpResponse:
    if request.method == "POST":
        print(request.body)
        return create_text_response("Hello, World!")
    return HttpResponse(
        status_code=200,
        body="Hello, World!",
        content_type="text/plain",
    )


# By providing docstrings, autogenerated OpenAPI documentation/requests can be created in development mode.
@router.route("/present-value", methods=["POST"])
def present_value(request: HttpRequest) -> HttpResponse:
    """
    Calculate the present value of a future amount.

    Parameters:
        future_value (float): The amount of money in the future.
        rate (float): Discount rate per period.
        periods (int): Number of periods until payment.

    Returns:
        dict: Present value of the future amount.
    """
    data = request.get_parsed_body()
    future_value = float(data["future_value"])
    rate = float(data["rate"])
    periods = int(data["periods"])
    present_value = future_value / ((1 + rate) ** periods)
    return create_json_response({"present_value": present_value})


@router.route("/redirect")
def redirect_response(request: HttpRequest):
    return create_redirect_response(location="/json")


router.add_route(
    "/json-lambda", lambda _: create_json_response({"message": "Hello, World!"})
)

server = AreionServerBuilder().with_port(8000).with_router(router).build()

if __name__ == "__main__":
    server.run()
